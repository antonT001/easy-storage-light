// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package filemgr is a generated GoMock package.
package filemgr

import (
	io "io"
	fs "io/fs"
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileMgr is a mock of FileMgr interface.
type MockFileMgr struct {
	ctrl     *gomock.Controller
	recorder *MockFileMgrMockRecorder
}

// MockFileMgrMockRecorder is the mock recorder for MockFileMgr.
type MockFileMgrMockRecorder struct {
	mock *MockFileMgr
}

// NewMockFileMgr creates a new mock instance.
func NewMockFileMgr(ctrl *gomock.Controller) *MockFileMgr {
	mock := &MockFileMgr{ctrl: ctrl}
	mock.recorder = &MockFileMgrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileMgr) EXPECT() *MockFileMgrMockRecorder {
	return m.recorder
}

// CopyFile mocks base method.
func (m *MockFileMgr) CopyFile(dst io.Writer, src io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFile", dst, src)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFile indicates an expected call of CopyFile.
func (mr *MockFileMgrMockRecorder) CopyFile(dst, src interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFile", reflect.TypeOf((*MockFileMgr)(nil).CopyFile), dst, src)
}

// CreateDirectory mocks base method.
func (m *MockFileMgr) CreateDirectory(relativePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDirectory", relativePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDirectory indicates an expected call of CreateDirectory.
func (mr *MockFileMgrMockRecorder) CreateDirectory(relativePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirectory", reflect.TypeOf((*MockFileMgr)(nil).CreateDirectory), relativePath)
}

// CreateFile mocks base method.
func (m *MockFileMgr) CreateFile(relativePath string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", relativePath)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockFileMgrMockRecorder) CreateFile(relativePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFileMgr)(nil).CreateFile), relativePath)
}

// DeleteDirectory mocks base method.
func (m *MockFileMgr) DeleteDirectory(relativePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDirectory", relativePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDirectory indicates an expected call of DeleteDirectory.
func (mr *MockFileMgrMockRecorder) DeleteDirectory(relativePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectory", reflect.TypeOf((*MockFileMgr)(nil).DeleteDirectory), relativePath)
}

// DeleteFilesByPaths mocks base method.
func (m *MockFileMgr) DeleteFilesByPaths(relativePaths []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilesByPaths", relativePaths)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilesByPaths indicates an expected call of DeleteFilesByPaths.
func (mr *MockFileMgrMockRecorder) DeleteFilesByPaths(relativePaths interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilesByPaths", reflect.TypeOf((*MockFileMgr)(nil).DeleteFilesByPaths), relativePaths)
}

// GetListContentsInDirectory mocks base method.
func (m *MockFileMgr) GetListContentsInDirectory(relativePath string) ([]fs.DirEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListContentsInDirectory", relativePath)
	ret0, _ := ret[0].([]fs.DirEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListContentsInDirectory indicates an expected call of GetListContentsInDirectory.
func (mr *MockFileMgrMockRecorder) GetListContentsInDirectory(relativePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListContentsInDirectory", reflect.TypeOf((*MockFileMgr)(nil).GetListContentsInDirectory), relativePath)
}

// IsEquivalentSHA256Checksum mocks base method.
func (m *MockFileMgr) IsEquivalentSHA256Checksum(data []byte, hashSHA256 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEquivalentSHA256Checksum", data, hashSHA256)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEquivalentSHA256Checksum indicates an expected call of IsEquivalentSHA256Checksum.
func (mr *MockFileMgrMockRecorder) IsEquivalentSHA256Checksum(data, hashSHA256 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEquivalentSHA256Checksum", reflect.TypeOf((*MockFileMgr)(nil).IsEquivalentSHA256Checksum), data, hashSHA256)
}

// OpenFile mocks base method.
func (m *MockFileMgr) OpenFile(relativePath string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", relativePath)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockFileMgrMockRecorder) OpenFile(relativePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockFileMgr)(nil).OpenFile), relativePath)
}
